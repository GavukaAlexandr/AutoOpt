# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  phoneNumber: String!
}

input AdminCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
}

input AdminInput {
  password: String!
  phoneNumber: String!
}

type Brand {
  id: ID!
  models: [Model!]!
  name: String!
  type: [Type!]!
}

input BrandFilter {
  name: String
  q: String
  typeId: String
}

input CreateCarParamsInput {
  bodyTypeId: ID!
  carPart: String!
  driveTypeId: ID!
  engineVolume: String!
  fuelId: [ID!]!
  modelId: String!
  partTypeId: ID!
  transmissionId: ID!
  userId: String!
  vin: String!
  year: String!
}

input CreateOrderInput {
  bodyTypeId: ID!
  carPart: String!
  comment: String
  driveTypeId: ID!
  engineVolume: String!
  fuelId: [ID!]!
  modelId: String!
  orderNumber: String
  partTypeId: ID!
  status: String
  transmissionId: ID!
  userCarParamId: String!
  userId: String!
  vin: String!
  year: String!
}

input CreateUserInput {
  email: String!
  firebaseUid: String!
  firstName: String
  lastName: String
  phoneNotification: Boolean!
  phoneNumber: String!
  telegramNotification: Boolean!
  viberNotification: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type IBodyType {
  id: ID!
  name: String!
}

type IDriveType {
  id: ID!
  name: String!
}

type IFuelType {
  id: ID!
  name: String!
}

type IOrderStatus {
  id: ID!
  name: String!
}

type IPartType {
  id: ID!
  name: String!
}

type ITransmission {
  id: ID!
  name: String!
}

type ListMetadata {
  count: Int
}

type Model {
  brand: Brand!
  id: ID!
  name: String!
  type: Type!
}

input ModelFilter {
  brand: String
  brandId: String
  q: String
  typeId: String
}

type Mutation {
  create(adminCreateInput: AdminCreateInput!): Admin!
  createBrand(name: String): Brand!
  createCarParams(createCarParamsInput: CreateCarParamsInput!): UserCarParams!
  createModel(brandId: ID, name: String, typeId: ID): Model!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createType(name: String): Type!
  createUser(createUserInput: CreateUserInput): User!
  updateBrand(id: ID, name: String): Brand!
  updateModel(brand: ID, id: ID, name: String, type: ID): Model!
  updateOrder(updateOrderInput: UpdateOrderInput): Order!
  updateType(id: ID, name: String): Type!
  updateUser(updateUserInput: UpdateUserInput): User!
  updateUserCarParams(updateUserCarParamsInput: UpdateUserCarParamsInput): UserCarParams!
}

type Order {
  bodyType: IBodyType!
  carPart: String!
  comment: String
  createdAt: DateTime!
  drive: IDriveType!
  engineVolume: String!
  fuels: [IFuelType!]!
  id: String!
  model: Model!
  orderNumber: String!
  partOfType: IPartType!
  status: IOrderStatus!
  transmission: ITransmission!
  updatedAt: DateTime!
  user: User!
  userCarParamId: String!
  vin: String!
  year: String!
}

input OrderFilter {
  carPart: String
  endDate: DateTime
  firstName: String
  lastName: String
  phoneNumber: String
  startDate: DateTime
  status: String
  user: ID
}

type Query {
  Brand(id: String!): Brand!
  Model(id: String!): Model!
  Order(id: ID): Order!
  Type(id: String!): Type!
  User(id: String!): User!
  allBrands(filter: BrandFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Brand!]!
  allBrandsMeta(filter: BrandFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): ListMetadata!
  allBrandsOfType(filter: BrandFilter, page: Int, perPage: Int): [Brand!]!
  allModels(filter: ModelFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Model!]!
  allModelsMeta(filter: ModelFilter, sortField: String, sortOrder: String): ListMetadata!
  allOrders(filter: OrderFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [Order!]!
  allOrdersMeta(filter: OrderFilter, sortField: String, sortOrder: String): ListMetadata!
  allTypes(page: Int, perPage: Int, sortField: String, sortOrder: String): [Type!]!
  allTypesMeta(sortField: String, sortOrder: String): ListMetadata!
  allUsers(filter: UserFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): [User!]!
  allUsersMeta(filter: UserFilter, page: Int, perPage: Int, sortField: String, sortOrder: String): ListMetadata!
  bodyTypes: [IBodyType!]!
  driveTypes: [IDriveType!]!
  fuelTypes: [IFuelType!]!
  getFirstOrder(sortField: String, sortOrder: String): [Order!]!
  login(variables: AdminInput): Token!
  orderStatuses: [IOrderStatus!]!
  partTypes: [IPartType!]!
  transmissions: [ITransmission!]!
  userCarParams(id: ID): UserCarParams!
}

type Token {
  token: String!
}

type Type {
  brands: [Brand!]!
  id: ID!
  models: [Model!]!
  name: String!
}

input UpdateOrderInput {
  comment: String
  id: ID
  status: String
}

input UpdateUserCarParamsInput {
  bodyType: String
  carPart: String
  drive: String
  engineVolume: String
  fuel: [String!]
  id: ID
  modelId: String
  partOfType: String
  transmission: String
  vin: String
  year: String
}

input UpdateUserInput {
  comment: String
  firstName: String
  id: ID!
  lastName: String
}

type User {
  comment: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastName: String!
  orders: [Order!]!
  phoneNotification: Boolean!
  phoneNumber: String!
  telegramNotification: Boolean!
  updatedAt: DateTime!
  viberNotification: Boolean!
}

type UserCarParams {
  bodyType: IBodyType!
  carPart: String!
  createdAt: DateTime!
  drive: IDriveType!
  engineVolume: String!
  fuels: [IFuelType!]!
  id: String!
  model: Model!
  partOfType: IPartType!
  transmission: ITransmission!
  updatedAt: DateTime!
  user: User!
  vin: String!
  year: String!
}

input UserFilter {
  email: String
  firstName: String
  lastName: String
  phoneNumber: String
}
