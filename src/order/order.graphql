type Query {
  order(id: ID!): Order
  orders(page: Int, perPage: Int, sortOrder: String): [Order!]
}

type Mutation {
  createOrder(createOrder: OrderInput): Order
  updateOrder(updateOrderInput: UpdateOrderInput): Order
  removeOrder(id: String): Order
}

input UpdateOrderInput {
  id: String!
  modelId: String
  transmission: Transmission
  bodyType: BodyType
  drive: DriveType
  year: String
  engineVolume: String
  vin: String
  carPart: String
  fuel: [FuelType]
  part: [PartType]
}

input OrderInput {
  userId: String
  modelId: String
  transmission: Transmission
  bodyType: BodyType
  drive: DriveType
  year: String
  engineVolume: String
  vin: String
  carPart: String
  fuel: [FuelType]
  part: [PartType]
}

type Order {
  id: String!
  userId: String
  modelId: Model
  transmission: Transmission
  bodyType: BodyType
  drive: DriveType
  year: String
  engineVolume: String
  vin: String
  carPart: String
  fuel: [FuelType]
  part: [PartType]
  createdAt: String
  updatedAt: String
  user: User
  model: Model
}

type User {
  id: String
  firstName: String
  lastName: String
  token: String
  firebaseUid: String
  email: String
  phoneNumber: String
  telegramNotification: Boolean
  viberNotification: Boolean
  phoneNotification: Boolean
  createdAt: String
  updatedAt: String
  orders: [Order]
}

type Model {
  id: String!
  user: [User]
  name: String!
  typeId: Type!
  brandId: Brand!
  order: [Order]
  type: Type
  brand: Brand
}

type Brand {
  id:    String!  
  name:  String!
  types: [Type]
  Model: [Model]
}

type Type {
  id: String!
  name: String!
  brands: [Brand]
  models: [Model]
}


enum FuelType {
  GASOLINE
  DIESEL
  ELECTRO
  HYBRID
}

enum Transmission {
  AUTOMATIC
  MECHANICAL
  VARIABLE
  ROBOT
}

enum BodyType {
  SEDAN
  HATCHBACK
  COUPE
  UNIVERSAL
  MINIVAN
  SUV
  PICKUP
  CABRIOLET
  VAN
  LIMOUSINE
}

enum DriveType {
  FULL
  FRONT
  REAR
}

enum PartType {
  ORIGINAL
  ANALOGUE
}
